<?php

namespace App\Http\Controllers;

use App\Models\ActivityLog;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Support\Facades\Log;
use Illuminate\Http\Request;
use App\Models\Post;
use App\Models\User;
use App\Models\Message;
use App\Models\Category;
use Illuminate\Support\Facades\DB;

class Controller extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;

    protected function logActivity($action)
    {
        try {
            ActivityLog::create([
                'user_id' => auth()->check() ? auth()->id() : null,
                'action' => $action,
                'activity_description' => $action,
                'logged_at' => now(),
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            Log::info('Activity logged successfully:', [
                'user_id' => auth()->id(),
                'action' => $action,
                'timestamp' => now()
            ]);
        } catch (\Exception $e) {
            Log::error('Failed to log activity: ' . $e->getMessage(), [
                'action' => $action,
                'user_id' => auth()->id() ?? 'guest'
            ]);
        }
    }

    public function search(Request $request)
    {
        try {
            $query = trim($request->get('q', ''));

            // Debug info dasar
            $debugInfo = [
                'timestamp' => now(),
                'query' => $query,
                'query_length' => strlen($query),
                'user_authenticated' => auth()->check(),
                'user_id' => auth()->id(),
                'user_role' => auth()->check() ? auth()->user()->role : null,
                'request_method' => $request->method(),
                'request_url' => $request->url(),
                'is_ajax' => $request->ajax(),
            ];

            Log::info('Search Debug Info', $debugInfo);

            // Jika query kosong atau terlalu pendek
            if (empty($query) || strlen($query) < 2) {
                Log::info('Query too short or empty', ['query' => $query]);
                return response()->json([
                    'results' => [],
                    'debug_info' => $debugInfo,
                    'message' => 'Query too short or empty'
                ]);
            }

            // Test koneksi database
            try {
                $dbTest = DB::select('SELECT 1 as test');
                Log::info('Database connection OK');
            } catch (\Exception $e) {
                Log::error('Database connection failed: ' . $e->getMessage());
                return response()->json([
                    'error' => 'Database connection failed',
                    'debug_info' => $debugInfo
                ], 500);
            }

            // Test apakah tabel ada dan ada data
            $tableStats = [];

            try {
                $tableStats['posts_exists'] = DB::getSchemaBuilder()->hasTable('posts');
                $tableStats['users_exists'] = DB::getSchemaBuilder()->hasTable('users');
                $tableStats['messages_exists'] = DB::getSchemaBuilder()->hasTable('messages');

                if ($tableStats['posts_exists']) {
                    $tableStats['posts_count'] = Post::count();
                    $tableStats['posts_sample'] = Post::take(2)->get(['id', 'title'])->toArray();
                }

                if ($tableStats['users_exists']) {
                    $tableStats['users_count'] = User::count();
                    $tableStats['users_sample'] = User::take(2)->get(['id', 'name', 'email'])->toArray();
                }

                if ($tableStats['messages_exists']) {
                    $tableStats['messages_count'] = Message::count();
                    $tableStats['messages_sample'] = Message::take(2)->get(['id', 'name'])->toArray();
                }

                Log::info('Table Statistics', $tableStats);

            } catch (\Exception $e) {
                Log::error('Failed to get table stats: ' . $e->getMessage());
                $tableStats['error'] = $e->getMessage();
            }

            $currentPage = $request->get('page', 'global');

            // Lakukan pencarian berdasarkan page
            switch ($currentPage) {
                case 'posts':
                    $results = $this->searchPosts($query);
                    break;
                case 'users':
                    $results = $this->searchUsers($query);
                    break;
                case 'messages':
                    $results = $this->searchMessages($query);
                    break;
                default:
                    $results = $this->globalSearch($query);
                    break;
            }

            // Response dengan debug info
            $response = [
                'results' => $results,
                'debug_info' => $debugInfo,
                'table_stats' => $tableStats,
                'search_type' => $currentPage,
                'query_used' => $query
            ];

            Log::info('Search completed', [
                'query' => $query,
                'results_structure' => array_keys($results),
                'has_results' => !empty($results)
            ]);

            return response()->json($response);

        } catch (\Exception $e) {
            Log::error('Search failed with exception', [
                'error' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'error' => 'Search failed: ' . $e->getMessage(),
                'debug_info' => isset($debugInfo) ? $debugInfo : [],
                'table_stats' => isset($tableStats) ? $tableStats : []
            ], 500);
        }
    }

    private function searchPosts($query)
    {
        try {
            Log::info("Searching posts with query: {$query}");

            $posts = Post::where(function($q) use ($query) {
                $q->where('title', 'LIKE', "%{$query}%")
                    ->orWhere('content', 'LIKE', "%{$query}%");
                // Add excerpt if column exists
                if (DB::getSchemaBuilder()->hasColumn('posts', 'excerpt')) {
                    $q->orWhere('excerpt', 'LIKE', "%{$query}%");
                }
            })
                ->limit(5)
                ->get();

            Log::info('Posts search results', ['count' => $posts->count()]);

            if ($posts->isEmpty()) {
                return [];
            }

            return [
                'posts' => $posts->map(function ($post) {
                    $subtitle = '';
                    if (isset($post->excerpt) && !empty($post->excerpt)) {
                        $subtitle = $post->excerpt;
                    } else {
                        $subtitle = substr(strip_tags($post->content ?? ''), 0, 100) . '...';
                    }

                    return [
                        'title' => $post->title,
                        'subtitle' => $subtitle,
                        'url' => route('post.show', $post->id)
                    ];
                })->toArray()
            ];
        } catch (\Exception $e) {
            Log::error('Search posts failed: ' . $e->getMessage());
            return [];
        }
    }

    private function searchUsers($query)
    {
        try {
            Log::info("Searching users with query: {$query}");

            $users = User::where('name', 'LIKE', "%{$query}%")
                ->orWhere('email', 'LIKE', "%{$query}%")
                ->limit(5)
                ->get();

            Log::info('User search results', ['count' => $users->count()]);

            if ($users->isEmpty()) {
                return [];
            }

            return [
                'users' => $users->map(function ($user) {
                    return [
                        'title' => $user->name,
                        'subtitle' => $user->email . ' (' . ucfirst($user->role ?? 'user') . ')',
                        'url' => route('user.show', $user->id)
                    ];
                })->toArray()
            ];
        } catch (\Exception $e) {
            Log::error('Search users failed: ' . $e->getMessage());
            return [];
        }
    }

    private function searchMessages($query)
    {
        try {
            Log::info("Searching messages with query: {$query}");

            $messages = Message::where('name', 'LIKE', "%{$query}%")
                ->orWhere('email', 'LIKE', "%{$query}%")
                ->orWhere('message', 'LIKE', "%{$query}%")
                ->limit(5)
                ->get();

            Log::info('Message search results', ['count' => $messages->count()]);

            if ($messages->isEmpty()) {
                return [];
            }

            return [
                'messages' => $messages->map(function ($message) {
                    return [
                        'title' => $message->name,
                        'subtitle' => substr($message->message ?? '', 0, 50) . '...',
                        'url' => route('message.show', $message->id)
                    ];
                })->toArray()
            ];
        } catch (\Exception $e) {
            Log::error('Search messages failed: ' . $e->getMessage());
            return [];
        }
    }

    private function globalSearch($query)
    {
        try {
            Log::info("Starting global search with query: {$query}");
            $results = [];

            // Search Posts
            try {
                $posts = Post::where(function($q) use ($query) {
                    $q->where('title', 'LIKE', "%{$query}%")
                        ->orWhere('content', 'LIKE', "%{$query}%");
                    if (DB::getSchemaBuilder()->hasColumn('posts', 'excerpt')) {
                        $q->orWhere('excerpt', 'LIKE', "%{$query}%");
                    }
                })
                    ->limit(3)
                    ->get();

                Log::info('Global posts search', ['count' => $posts->count()]);

                if ($posts->count() > 0) {
                    $results['posts'] = $posts->map(function ($post) {
                        $subtitle = '';
                        if (isset($post->excerpt) && !empty($post->excerpt)) {
                            $subtitle = $post->excerpt;
                        } else {
                            $subtitle = substr(strip_tags($post->content ?? ''), 0, 100) . '...';
                        }

                        return [
                            'title' => $post->title,
                            'subtitle' => $subtitle,
                            'url' => route('post.show', $post->id)
                        ];
                    })->toArray();
                }
            } catch (\Exception $e) {
                Log::error('Global posts search failed: ' . $e->getMessage());
            }

            // Search Users (only for admin)
            try {
                if (auth()->check() && auth()->user() && auth()->user()->role === 'admin') {
                    $users = User::where('name', 'LIKE', "%{$query}%")
                        ->orWhere('email', 'LIKE', "%{$query}%")
                        ->limit(3)
                        ->get();

                    Log::info('Global users search (admin)', ['count' => $users->count()]);

                    if ($users->count() > 0) {
                        $results['users'] = $users->map(function ($user) {
                            return [
                                'title' => $user->name,
                                'subtitle' => $user->email . ' (' . ucfirst($user->role ?? 'user') . ')',
                                'url' => route('user.show', $user->id)
                            ];
                        })->toArray();
                    }
                } else {
                    Log::info('Skipping user search - not admin or not authenticated');
                }
            } catch (\Exception $e) {
                Log::error('Global users search failed: ' . $e->getMessage());
            }

            // Search Messages
            try {
                $messages = Message::where('name', 'LIKE', "%{$query}%")
                    ->orWhere('message', 'LIKE', "%{$query}%")
                    ->limit(3)
                    ->get();

                Log::info('Global messages search', ['count' => $messages->count()]);

                if ($messages->count() > 0) {
                    $results['messages'] = $messages->map(function ($message) {
                        return [
                            'title' => $message->name,
                            'subtitle' => substr($message->message ?? '', 0, 50) . '...',
                            'url' => route('message.show', $message->id)
                        ];
                    })->toArray();
                }
            } catch (\Exception $e) {
                Log::error('Global messages search failed: ' . $e->getMessage());
            }

            Log::info('Global search completed', [
                'results_keys' => array_keys($results),
                'total_categories' => count($results)
            ]);

            return $results;

        } catch (\Exception $e) {
            Log::error('Global search failed: ' . $e->getMessage());
            return [];
        }
    }
}
