<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Post;
use App\Models\Category;
use Illuminate\Http\Request;

class FePostController extends Controller
{
    /**
     * Display posts with independent filtering by category and search
     */
    public function index(Request $request)
    {
        // Initialize query
        $query = Post::with(['category', 'user']);

        // Track applied filters
        $appliedFilters = [
            'category' => null,
            'search' => null,
            'has_filters' => false
        ];

        // Apply category filter (independent)
        if ($request->filled('category')) {
            $category = Category::where('slug', $request->category)->first();
            if ($category) {
                $query->where('category_id', $category->id);
                $appliedFilters['category'] = $category;
                $appliedFilters['has_filters'] = true;
            } else {
                return redirect()->route('fe-post.index')
                    ->with('error', 'Kategori tidak ditemukan.');
            }
        }

        // Apply search filter (independent)
        if ($request->filled('search')) {
            $searchTerm = trim($request->search);
            $query->where(function($q) use ($searchTerm) {
                $q->where('title', 'like', '%' . $searchTerm . '%')
                    ->orWhere('content', 'like', '%' . $searchTerm . '%');
            });
            $appliedFilters['search'] = $searchTerm;
            $appliedFilters['has_filters'] = true;
        }

        // Apply sorting
        $query = $this->applySorting($query, $request);

        // Get paginated results
        $posts = $query->paginate(6);
        $posts->appends($request->query());

        // Get sidebar data
        $sidebarData = $this->getSidebarData();

        return view('frontend.post.index', array_merge([
            'posts' => $posts,
            'appliedFilters' => $appliedFilters,
        ], $sidebarData));
    }

    /**
     * Display posts by specific category (clean category view)
     */
    public function category($slug)
    {
        $category = Category::where('slug', $slug)->firstOrFail();

        $posts = Post::with(['category', 'user'])
            ->where('category_id', $category->id)
            ->latest('created_at')
            ->paginate(6);

        $sidebarData = $this->getSidebarData();

        return view('frontend.post.category', array_merge([
            'posts' => $posts,
            'currentCategory' => $category,
        ], $sidebarData));
    }

    /**
     * Dedicated search endpoint (clean search view)
     */
    public function search(Request $request)
    {
        $searchTerm = trim($request->get('q', $request->get('search', '')));

        if (empty($searchTerm)) {
            return redirect()->route('fe-post.index')
                ->with('info', 'Silakan masukkan kata kunci pencarian.');
        }

        // Perform advanced search with relevance scoring
        $posts = Post::with(['category', 'user'])
            ->where(function($query) use ($searchTerm) {
                $query->where('title', 'like', '%' . $searchTerm . '%')
                    ->orWhere('content', 'like', '%' . $searchTerm . '%')
                    ->orWhereHas('category', function($categoryQuery) use ($searchTerm) {
                        $categoryQuery->where('name', 'like', '%' . $searchTerm . '%');
                    });
            })
            ->selectRaw('posts.*,
                CASE
                    WHEN title LIKE ? THEN 10
                    WHEN title LIKE ? THEN 8
                    WHEN content LIKE ? THEN 5
                    WHEN EXISTS (
                        SELECT 1 FROM categories
                        WHERE categories.id = posts.category_id
                        AND categories.name LIKE ?
                    ) THEN 3
                    ELSE 1
                END as relevance_score', [
                $searchTerm . '%',
                '%' . $searchTerm . '%',
                '%' . $searchTerm . '%'
            ])
            ->orderBy('relevance_score', 'desc')
            ->orderBy('created_at', 'desc')
            ->paginate(10);

        $posts->appends(['q' => $searchTerm]);
        $sidebarData = $this->getSidebarData();

        return view('frontend.post.search', array_merge([
            'posts' => $posts,
            'searchTerm' => $searchTerm,
            'searchResultsCount' => $posts->total(),
        ], $sidebarData));
    }

    /**
     * Display single post
     */
    public function show($slug)
    {
        $post = Post::with(['category', 'user'])
            ->where('slug', $slug)
            ->firstOrFail();

        // Increment views
        $post->increment('views');

        // Get related posts from same category
        $relatedPosts = Post::with(['category', 'user'])
            ->where('category_id', $post->category_id)
            ->where('id', '!=', $post->id)
            ->orderBy('views', 'desc')
            ->take(4)
            ->get();

        return view('frontend.post.detail', compact('post', 'relatedPosts'));
    }
}
